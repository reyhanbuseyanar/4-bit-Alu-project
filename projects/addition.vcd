$date
	Mon Jan 20 11:23:17 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module additionTB $end
$var wire 1 ! overflow $end
$var wire 4 " Y [3:0] $end
$var wire 1 # CarryOUT $end
$var reg 4 $ A [3:0] $end
$var reg 4 % B [3:0] $end
$var reg 1 & CarryIN $end
$scope module uut $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 & CarryIN $end
$var wire 1 ! overflow $end
$var wire 4 ) Y [3:0] $end
$var wire 1 # CarryOUT $end
$var wire 3 * Carry4 [2:0] $end
$scope module f0 $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 & Carry $end
$var wire 1 - CarryO $end
$var wire 1 . xor1 $end
$var wire 1 / and2 $end
$var wire 1 0 and1 $end
$var wire 1 1 Sum $end
$scope module h1 $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 0 Carry $end
$var wire 1 . Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 . A $end
$var wire 1 & B $end
$var wire 1 / Carry $end
$var wire 1 1 Sum $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 2 A $end
$var wire 1 3 B $end
$var wire 1 4 Carry $end
$var wire 1 5 CarryO $end
$var wire 1 6 xor1 $end
$var wire 1 7 and2 $end
$var wire 1 8 and1 $end
$var wire 1 9 Sum $end
$scope module h1 $end
$var wire 1 2 A $end
$var wire 1 3 B $end
$var wire 1 8 Carry $end
$var wire 1 6 Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 6 A $end
$var wire 1 4 B $end
$var wire 1 7 Carry $end
$var wire 1 9 Sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 : A $end
$var wire 1 ; B $end
$var wire 1 < Carry $end
$var wire 1 = CarryO $end
$var wire 1 > xor1 $end
$var wire 1 ? and2 $end
$var wire 1 @ and1 $end
$var wire 1 A Sum $end
$scope module h1 $end
$var wire 1 : A $end
$var wire 1 ; B $end
$var wire 1 @ Carry $end
$var wire 1 > Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 > A $end
$var wire 1 < B $end
$var wire 1 ? Carry $end
$var wire 1 A Sum $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 B A $end
$var wire 1 C B $end
$var wire 1 D Carry $end
$var wire 1 # CarryO $end
$var wire 1 E xor1 $end
$var wire 1 F and2 $end
$var wire 1 G and1 $end
$var wire 1 H Sum $end
$scope module h1 $end
$var wire 1 B A $end
$var wire 1 C B $end
$var wire 1 G Carry $end
$var wire 1 E Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 E A $end
$var wire 1 D B $end
$var wire 1 F Carry $end
$var wire 1 H Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
0#
b0 "
0!
$end
#10
1H
1!
1D
1=
1?
1<
b110 *
15
b1000 "
b1000 )
0A
18
1>
13
12
1:
b10 %
b10 (
b110 $
b110 '
#20
1;
0:
b110 %
b110 (
b10 $
b10 '
#30
0!
0<
1#
b100 *
05
0?
0A
1F
b0 "
b0 )
0H
08
1@
0>
1E
03
02
1:
1B
b100 %
b100 (
b1100 $
b1100 '
#40
1!
0D
0F
b0 "
b0 )
0H
b0 *
0=
1G
0E
0@
0;
1C
0:
b1000 %
b1000 (
b1000 $
b1000 '
#50
1F
1D
1=
1?
1<
15
17
0!
14
1#
0H
b111 *
1-
09
0A
0G
1E
10
16
1>
b1 "
b1 )
11
1,
0C
1+
12
1:
1&
b1 %
b1 (
b1111 $
b1111 '
#60
